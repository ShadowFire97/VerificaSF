//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `userCell`.
    static let userCell: Rswift.ReuseIdentifier<UserCell> = Rswift.ReuseIdentifier(identifier: "userCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `AddInfoViewController`, and contains static references to 1 segues.
    struct addInfoViewController {
      /// Segue identifier `toMainSegue`.
      static let toMainSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddInfoViewController, UserListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toMainSegue")
      
      /// Optionally returns a typed version of segue `toMainSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toMainSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddInfoViewController, UserListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addInfoViewController.toMainSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LoadingController`, and contains static references to 2 segues.
    struct loadingController {
      /// Segue identifier `loginSegue`.
      static let loginSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoadingController, LoginViewController> = Rswift.StoryboardSegueIdentifier(identifier: "loginSegue")
      /// Segue identifier `toMainSegue`.
      static let toMainSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoadingController, UserListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toMainSegue")
      
      /// Optionally returns a typed version of segue `loginSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func loginSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoadingController, LoginViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loadingController.loginSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toMainSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toMainSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoadingController, UserListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loadingController.toMainSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LoginViewController`, and contains static references to 1 segues.
    struct loginViewController {
      /// Segue identifier `toMainSegue`.
      static let toMainSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, UserListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toMainSegue")
      
      /// Optionally returns a typed version of segue `toMainSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toMainSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, UserListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.toMainSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SignUpViewController`, and contains static references to 1 segues.
    struct signUpViewController {
      /// Segue identifier `addDetailSegue`.
      static let addDetailSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignUpViewController, AddInfoViewController> = Rswift.StoryboardSegueIdentifier(identifier: "addDetailSegue")
      
      /// Optionally returns a typed version of segue `addDetailSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func addDetailSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignUpViewController, AddInfoViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signUpViewController.addDetailSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 5 localization keys.
    struct localizable {
      /// it translation: Accedi
      /// 
      /// Locales: it, en
      static let loginLabel = Rswift.StringResource(key: "loginLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["it", "en"], comment: nil)
      /// it translation: Conferma password
      /// 
      /// Locales: it, en
      static let confirmPasswordPlaceHolder = Rswift.StringResource(key: "confirmPasswordPlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["it", "en"], comment: nil)
      /// it translation: Email
      /// 
      /// Locales: it, en
      static let emailPlaceHolder = Rswift.StringResource(key: "emailPlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["it", "en"], comment: nil)
      /// it translation: Password
      /// 
      /// Locales: it, en
      static let passwordPlaceHolder = Rswift.StringResource(key: "passwordPlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["it", "en"], comment: nil)
      /// it translation: Registrati
      /// 
      /// Locales: it, en
      static let signUpLabel = Rswift.StringResource(key: "signUpLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["it", "en"], comment: nil)
      
      /// it translation: Accedi
      /// 
      /// Locales: it, en
      static func loginLabel(_: Void = ()) -> String {
        return NSLocalizedString("loginLabel", bundle: R.hostingBundle, comment: "")
      }
      
      /// it translation: Conferma password
      /// 
      /// Locales: it, en
      static func confirmPasswordPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("confirmPasswordPlaceHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// it translation: Email
      /// 
      /// Locales: it, en
      static func emailPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("emailPlaceHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// it translation: Password
      /// 
      /// Locales: it, en
      static func passwordPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("passwordPlaceHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// it translation: Registrati
      /// 
      /// Locales: it, en
      static func signUpLabel(_: Void = ()) -> String {
        return NSLocalizedString("signUpLabel", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 6 localization keys.
    struct main {
      /// it translation: Button
      /// 
      /// Locales: it
      static let eyEQ2H2DNormalTitle = Rswift.StringResource(key: "eyE-q2-h2D.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: Button
      /// 
      /// Locales: it
      static let gatETKBONormalTitle = Rswift.StringResource(key: "Gat-eT-KBO.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: Button
      /// 
      /// Locales: it
      static let obfHNYaVNormalTitle = Rswift.StringResource(key: "obf-HN-yaV.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: Button
      /// 
      /// Locales: it
      static let wazCSDouNormalTitle = Rswift.StringResource(key: "Waz-cS-dou.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: Label
      /// 
      /// Locales: it
      static let bMvA8YArText = Rswift.StringResource(key: "bMv-a8-yAr.text", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: Label
      /// 
      /// Locales: it
      static let bNQb0ovText = Rswift.StringResource(key: "7bN-Qb-0ov.text", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      
      /// it translation: Button
      /// 
      /// Locales: it
      static func eyEQ2H2DNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("eyE-q2-h2D.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// it translation: Button
      /// 
      /// Locales: it
      static func gatETKBONormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Gat-eT-KBO.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// it translation: Button
      /// 
      /// Locales: it
      static func obfHNYaVNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("obf-HN-yaV.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// it translation: Button
      /// 
      /// Locales: it
      static func wazCSDouNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Waz-cS-dou.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// it translation: Label
      /// 
      /// Locales: it
      static func bMvA8YArText(_: Void = ()) -> String {
        return NSLocalizedString("bMv-a8-yAr.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// it translation: Label
      /// 
      /// Locales: it
      static func bNQb0ovText(_: Void = ()) -> String {
        return NSLocalizedString("7bN-Qb-0ov.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoadingController
      
      let bundle = R.hostingBundle
      let login = StoryboardViewControllerResource<LoginViewController>(identifier: "Login")
      let name = "Main"
      
      func login(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: login)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().login() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
